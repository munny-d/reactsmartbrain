{"version":3,"sources":["components/Logo/dcg.png","components/FaceRecognition/FaceRecognition.js","components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FaceRecognition","imageUrl","box","className","id","alt","src","width","heigh","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Navigation","display","justifyContent","Logo","options","max","height","paddingBottom","dcg","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","Rank","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","console","log","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","params","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47645eec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dcg.6a56bff7.png\";","import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n  return (\r\n    <div className='center ma'>\r\n      <div className='absolute mt2'>\r\n        <img id='inputimage' alt='' src={imageUrl} width='500px' heigh='auto'/>\r\n        <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n            <p className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport dcg from './dcg.png';\r\nimport './Logo.css';\r\n \r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2\" options={{ max : 55 }} style={{ height: 150, width: 150 }} >\r\n            <div className=\"Tilt-inner\">\r\n                <img style={{paddingBottom:'5px'}} alt='logo' src={dcg}/>\r\n            </div>\r\n            </Tilt>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n    return (\r\n        <div>\r\n            <p className='f3'>\r\n                {'This function will detect faces in your picture.'}\r\n            </p>\r\n            <div className='centre'>\r\n            <div className='form centre pa4 br3 shadow-5'>\r\n                <input className='f4 pa2 w-70 center' type='tex' onChange={onInputChange} />\r\n                <button\r\n                    onClick={onButtonSubmit}\r\n                    className='w-30 grow f4 link ph3 pv2 dib white bg-blue'>\r\n                    Detect\r\n                    </button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div>\r\n            <div className='white f3'>\r\n                {'Munny, your current rank is...'}\r\n            </div>\r\n            <div className='white f1'>\r\n                {'#5'}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Rank","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport Clarifai from 'clarifai';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Logo from './components/Logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Rank from './components/Rank/Rank';\r\nimport './App.css';\r\n\r\nconst app = new Clarifai.App({\r\n  apiKey: '5f724f7fa115497f84961093dd88fddb'\r\n });\r\n\r\nconst particlesOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 30,\r\n      density: {\r\n        enable: true,\r\n        value_area:300\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      input:'',\r\n      imageUrl:'',\r\n      box: {},\r\n    }\r\n  }\r\n\r\n  calculateFaceLocation = (data) => {\r\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.getElementById('inputimage');\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    console.log(box);\r\n    this.setState({box:box});\r\n  }\r\n\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    this.setState({imageUrl: this.state.input});\r\n    app.models\r\n      .predict(\r\n        Clarifai.FACE_DETECT_MODEL,\r\n        this.state.input)\r\n        .then(response => this.displayFaceBox (this.calculateFaceLocation(response)))\r\n        .catch(err => console.log(err));\r\n      }\r\n\r\n  render () {\r\n    return (\r\n    <div className=\"App\">\r\n        <Particles className='particles'\r\n        params={particlesOptions}\r\n        />\r\n      <Navigation />\r\n      <Logo />\r\n      <Rank />\r\n      <ImageLinkForm \r\n      onInputChange={this.onInputChange} \r\n      onButtonSubmit={this.onButtonSubmit}\r\n      />\r\n      <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} />\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}